# Get the data columns to use for finding matches
datacols <- setdiff(names(df), idcol)
# Sort by idcol, then datacols. Save order so we can undo the sorting later.
sortorder <- do.call(order, df)
df <- df[sortorder,]
# Find duplicates within each id group (first copy not marked)
dupWithin <- duplicated(df)
# With duplicates within each group filtered out, find duplicates between groups.
# Need to scan up and down with duplicated() because first copy is not marked.
dupBetween = rep(NA, nrow(df))
dupBetween[!dupWithin] <- duplicated(df[!dupWithin,datacols])
dupBetween[!dupWithin] <- duplicated(df[!dupWithin,datacols], fromLast=TRUE) | dupBetween[!dupWithin]
# ============= Replace NA's with previous non-NA value ==============
# This is why we sorted earlier - it was necessary to do this part efficiently
# Get indexes of non-NA's
goodIdx <- !is.na(dupBetween)
# These are the non-NA values from x only
# Add a leading NA for later use when we index into this vector
goodVals <- c(NA, dupBetween[goodIdx])
# Fill the indices of the output vector with the indices pulled from
# these offsets of goodVals. Add 1 to avoid indexing to zero.
fillIdx <- cumsum(goodIdx)+1
# The original vector, now with gaps filled
dupBetween <- goodVals[fillIdx]
# Undo the original sort
dupBetween[sortorder] <- dupBetween
# Return the vector of which entries are duplicated across groups
return(dupBetween)
}
dupRows <- dupsBetweenGroups(df, "CODER")
source('~/Desktop/ET_Analysis/cleanData.R')
df <- cbind(df, dup=dupRows)
View(df)
View(df)
source('~/Desktop/ET_Analysis/cleanData.R')
packages_list <- c("ggplot2", "dplyr", "stringr")
install_or_call <- function(list = packages_list){
installed <- installed.packages()[,"Package"]
for( package in packages_list ){
if(!(package %in% installed)){
install.packages(package)
}
do.call(library, list(package))
}
}
install_or_call()
load("data/ucl_po_1994_2019.rda")
dupsBetweenGroups <- function (df, idcol) {
# df: the data frame
# idcol: the column which identifies the group each row belongs to
# Get the data columns to use for finding matches
datacols <- setdiff(names(df), idcol)
# Sort by idcol, then datacols. Save order so we can undo the sorting later.
sortorder <- do.call(order, df)
df <- df[sortorder,]
# Find duplicates within each id group (first copy not marked)
dupWithin <- duplicated(df)
# With duplicates within each group filtered out, find duplicates between groups.
# Need to scan up and down with duplicated() because first copy is not marked.
dupBetween = rep(NA, nrow(df))
dupBetween[!dupWithin] <- duplicated(df[!dupWithin,datacols])
dupBetween[!dupWithin] <- duplicated(df[!dupWithin,datacols], fromLast=TRUE) | dupBetween[!dupWithin]
# ============= Replace NA's with previous non-NA value ==============
# This is why we sorted earlier - it was necessary to do this part efficiently
# Get indexes of non-NA's
goodIdx <- !is.na(dupBetween)
# These are the non-NA values from x only
# Add a leading NA for later use when we index into this vector
goodVals <- c(NA, dupBetween[goodIdx])
# Fill the indices of the output vector with the indices pulled from
# these offsets of goodVals. Add 1 to avoid indexing to zero.
fillIdx <- cumsum(goodIdx)+1
# The original vector, now with gaps filled
dupBetween <- goodVals[fillIdx]
# Undo the original sort
dupBetween[sortorder] <- dupBetween
# Return the vector of which entries are duplicated across groups
return(dupBetween)
}
et_games <- ucl_po_1994_2019_scrapped %>%
filter(str_detect(RESULT, pattern = "[a-zA-Z]"))
get_first_games <- function(data = et_games, source = ucl_po_1994_2019_scrapped){
result <- c()
for(game in 1:nrow(data)){
et_game <- data[game,]
first_game <- source %>%
filter(COMP == et_game$COMP, SEASON == et_game$SEASON, ROUND == et_game$ROUND,
AWAYTEAM == et_game$HOMETEAM, HOMETEAM == et_game$AWAYTEAM)
result <- rbind(result, first_game)
}
return(as.data.frame(result))
}
first_rounds <- get_first_games()
et_games <- rbind(et_games, first_rounds)
games <- ucl_po_1994_2019_scrapped %>%
filter(!(str_detect(RESULT, pattern = "[a-zA-Z]")))
games$CODER <- "A"
first_rounds$CODER <- "B"
df <- rbind(games, first_rounds)
dupRows <- dupsBetweenGroups(df, "CODER")
df <- cbind(df, dup=dupRows)
View(df)
View(df)
source('~/Desktop/ET_Analysis/cleanData.R')
df1 <- df %>%
filter(dup == T)
source('~/Desktop/ET_Analysis/cleanData.R')
df <- cbind(df, dup=dupRows)
df <- rbind(games, first_rounds)
dupRows <- dupsBetweenGroups(df, "CODER")
df <- cbind(df, dup=dupRows)
df <- rbind(games, first_rounds)
dupRows <- dupsBetweenGroups(df, "CODER")
df <- cbind(df, dup=dupRows)
df1 <- df %>%
filter(dup == F)
source('~/Desktop/ET_Analysis/cleanData.R')
install.packages("compare")
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
library(compare)
compare(games, first_rounds)
source('~/Desktop/ET_Analysis/cleanData.R')
df3 <- anti_join(games, first_rounds)
df3 <- anti_join(games, first_rounds)
install.packages("remotes")
remotes::install_github("vapniks/mergeutils")
library(mergeutils)
install.packages("mergeutils")
install.packages("mergeutils")
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R', echo=TRUE)
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
View(df1)
View(df1)
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
exclude_et_games <- function(data = ucl_po_1994_2019_scrapped, et_games = et_games ){
data$ID <- "ALL_GAMES"
et_games$ID <- "ET_GAMES"
games <- rbind(data, et_games)
dup_rows <- dupsBetweenGroups(df, ID)
games <- cbind(games, dup = dup_rows)
games <- games %>%
filter(dup == F) %>%
select(-c(ID,dup))
return(games)
}
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R', echo=TRUE)
games <- exclude_et_games()
source('~/Desktop/ET_Analysis/cleanData.R')
View(et_games)
View(et_games)
exclude_et_games <- function(data = ucl_po_1994_2019_scrapped, et_games = et_games ){
data$ID <- "ALL_GAMES"
et_games$ID <- "ET_GAMES"
games <- rbind(data, et_games)
dup_rows <- dupsBetweenGroups(df, ID)
games <- cbind(games, dup = dup_rows)
games <- games %>%
filter(dup == F) %>%
select(-c(ID,dup))
return(games)
}
games <- exclude_et_games()
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
exclude_et_games <- function(data = ucl_po_1994_2019_scrapped, et_games = et_games ){
data$ID = "ALL_GAMES"
et_games$ID = "ET_GAMES"
games <- rbind(data, et_games)
dup_rows <- dupsBetweenGroups(df, ID)
games <- cbind(games, dup = dup_rows)
games <- games %>%
filter(dup == F) %>%
select(-c(ID,dup))
return(games)
}
games <- exclude_et_games()
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
packages_list <- c("ggplot2", "dplyr", "stringr", "remotes")
install_or_call <- function(list = packages_list){
installed <- installed.packages()[,"Package"]
for( package in packages_list ){
if(!(package %in% installed)){
install.packages(package)
}
do.call(library, list(package))
}
}
install_or_call()
#remotes::install_github("vapniks/mergeutils")
library("mergeutils")
#remotes::install_github("vapniks/mergeutils")
library("mergeutils")
load("data/ucl_po_1994_2019.rda")
et_games <- ucl_po_1994_2019_scrapped %>%
filter(str_detect(RESULT, pattern = "[a-zA-Z]"))
get_first_games <- function(data = et_games, source = ucl_po_1994_2019_scrapped){
result <- c()
for(game in 1:nrow(data)){
et_game <- data[game,]
first_game <- source %>%
filter(COMP == et_game$COMP, SEASON == et_game$SEASON, ROUND == et_game$ROUND,
AWAYTEAM == et_game$HOMETEAM, HOMETEAM == et_game$AWAYTEAM)
result <- rbind(result, first_game)
}
return(as.data.frame(result))
}
first_rounds <- get_first_games()
et_games <- rbind(et_games, first_rounds)
exclude_et_games <- function(data = ucl_po_1994_2019_scrapped, et_games = et_games ){
data$ID = "ALL_GAMES"
et_games$ID = "ET_GAMES"
games <- rbind(data, et_games)
dup_rows <- dupsBetweenGroups(df, ID)
games <- cbind(games, dup = dup_rows)
games <- games %>%
filter(dup == F) %>%
select(-c(ID,dup))
return(games)
}
games <- exclude_et_games()
exclude_et_games <- function(data = ucl_po_1994_2019_scrapped, et = et_games ){
data$ID = "ALL_GAMES"
et$ID = "ET_GAMES"
games <- rbind(data, et)
dup_rows <- dupsBetweenGroups(df, ID)
games <- cbind(games, dup = dup_rows)
games <- games %>%
filter(dup == F) %>%
select(-c(ID,dup))
return(games)
}
games <- exclude_et_games()
exclude_et_games <- function(data = ucl_po_1994_2019_scrapped, et = et_games ){
data$ID = "ALL_GAMES"
et$ID = "ET_GAMES"
games <- rbind(data, et)
dup_rows <- dupsBetweenGroups(df, "ID")
games <- cbind(games, dup = dup_rows)
games <- games %>%
filter(dup == F) %>%
select(-c(ID,dup))
return(games)
}
games <- exclude_et_games()
games <- exclude_et_games()
exclude_et_games <- function(data = ucl_po_1994_2019_scrapped, et = et_games ){
data$ID = "ALL_GAMES"
et$ID = "ET_GAMES"
games <- rbind(data, et)
dup_rows <- dupsBetweenGroups(games, "ID")
games <- cbind(games, dup = dup_rows)
games <- games %>%
filter(dup == F) %>%
select(-c(ID,dup))
return(games)
}
games <- exclude_et_games()
View(games)
View(games)
str_split("2:0 (0:0)", pattern = " ")
a
a <- str_split("2:0 (0:0)", pattern = " ")
a
a[1]
a[[1]]
a[[1]][2]
a[2]
a[1]
a <- str_split("2:0 (0:0)", pattern = " ")
a
a[[1]][2]
str_extract(a[[1]][2], pattern = "[0-9:0-9]")
str_extract(a[[1]][2], pattern = "[0-9:{1}0-9]")
str_extract(a[[1]][2], pattern = "[0-9, :]")
str_extract(a[[1]][2], pattern = "[0-9, :]")
get_scores_for_halfs <- function(score) {
halfs <- str_split(score, pattern = " ")
fh <- halfs[[1]][2]
}
str_extract(a[[1]][2], pattern = "[0-9, :]")
str_extract_all(a[[1]][2], pattern = "[0-9, :]")
str_extract_all(a[[1]][2], pattern = "[0-9, :]")[[1]][1]
str_extract_all(a[[1]][2], pattern = "[0-9, :]")[[1]][2]
str_extract_all(a[[1]][2], pattern = "[0-9, :]")[[1]][3]
get_scores_for_halfs <- function(score) {
halfs <- str_split(score, pattern = " ")
fh <- halfs[[1]][2]
ft <- halfs[[1]][2]
fh_goals <- str_extract_all(fh, pattern = "[0-9, :]")
ft_goals <- str2expression(ft, pattern = "[0-9, :]")
return(list(FTHG = fh_goals[[1]][1],
FTAG = fh_goals[[1]][3],
HTFG = hf_goals[[1]][1],
HTAG = hf_goals[[1]][3]))
}
a <-  get_scores_for_halfs("2:0 (0:0)")
get_scores_for_halfs <- function(score) {
halfs <- str_split(score, pattern = " ")
fh <- halfs[[1]][2]
ft <- halfs[[1]][2]
fh_goals <- str_extract_all(fh, pattern = "[0-9, :]")
ft_goals <- str_extract_all(ft, pattern = "[0-9, :]")
return(list(FTHG = fh_goals[[1]][1],
FTAG = fh_goals[[1]][3],
HTFG = hf_goals[[1]][1],
HTAG = hf_goals[[1]][3]))
}
a <-  get_scores_for_halfs("2:0 (0:0)")
get_scores_for_halfs <- function(score) {
halfs <- str_split(score, pattern = " ")
fh <- halfs[[1]][2]
ft <- halfs[[1]][1]
fh_goals <- str_extract_all(fh, pattern = "[0-9, :]")
ft_goals <- str_extract_all(ft, pattern = "[0-9, :]")
return(list(FTHG = ft_goals[[1]][1],
FTAG = ft_goals[[1]][3],
HTFG = fh_goals[[1]][1],
HTAG = fh_goals[[1]][3]))
}
a <-  get_scores_for_halfs("2:0 (0:0)")
View(a)
View(a)
a <-  get_scores_for_halfs("5:5 (4:4)")
a <-  get_scores_for_halfs("5:5 (4:4)")
View(a)
View(a)
a <-  get_scores_for_halfs("5:5 (4:2)")
View(a)
View(a)
View(a)
View(a)
a <-  get_scores_for_halfs("5:5 (4:2)")
View(a)
View(a)
View(a)
View(a)
get_scores_for_halfs <- function(score) {
halfs <- str_split(score, pattern = " ")
fh <- halfs[[1]][2]
ft <- halfs[[1]][1]
fh_goals <- str_extract_all(fh, pattern = "[0-9, :]")
ft_goals <- str_extract_all(ft, pattern = "[0-9, :]")
return(list(FTHG = ft_goals[[1]][1],
FTAG = ft_goals[[1]][3],
HTHG = fh_goals[[1]][1],
HTAG = fh_goals[[1]][3]))
}
a <-  get_scores_for_halfs("5:5 (4:2)")
View(a)
View(a)
games <- games %>%
mutate(GOALS = get_scores_for_halfs(RESULT)) %>%
mutate(FTHG = GOALS$FTHG, FTAG = GOALS$FTAG,
HTHG = GOALS$HTHG, HTAG = GOALS$HTAG)
games <- games %>%
rowwise() %>%
mutate(GOALS = get_scores_for_halfs(RESULT)) %>%
mutate(FTHG = GOALS$FTHG, FTAG = GOALS$FTAG,
HTHG = GOALS$HTHG, HTAG = GOALS$HTAG)
games <- games %>%
rowwise() %>%
mutate(FTHG = get_scores_for_halfs(RESULT)$FTHG, FTAG = get_scores_for_halfs(RESULT)$FTAG,
HTHG = get_scores_for_halfs(RESULT)$HTHG, HTAG = get_scores_for_halfs(RESULT)$HTAG)
View(games)
View(games)
games <- games %>%
rowwise() %>%
mutate(FTHG = get_scores_for_halfs(RESULT)$FTHG,
FTAG = get_scores_for_halfs(RESULT)$FTAG,
HTHG = get_scores_for_halfs(RESULT)$HTHG,
HTAG = get_scores_for_halfs(RESULT)$HTAG) %>%
select(COMP, SEASON, ROUND, LEG, DATE, HOMETEAM, AWAYTEAM,
FTHG, FTAG, HTHG, HTAG)
View(games)
View(games)
get_away_goal_games <- function(data = games) {
result <- c()
for(i in 1:nrow(data)){
game <- data[i,]
other_leg <- data %>%
filter(COMP == game$COMP, SEASON == game$SEASON, ROUND == game$ROUND,
AWAYTEAM == game$HOMETEAM, HOMETEAM == game$AWAYTEAM)
if(game$FTHG + other_leg$FTAG == game$FTAG + other_leg$FTHG){
result <- rbind(result, game, other_leg)
}
}
return(result)
}
aways <- get_away_goal_games()
str(games)
get_scores_for_halfs <- function(score) {
halfs <- str_split(score, pattern = " ")
fh <- halfs[[1]][2]
ft <- halfs[[1]][1]
fh_goals <- str_extract_all(fh, pattern = "[0-9, :]")
ft_goals <- str_extract_all(ft, pattern = "[0-9, :]")
return( list(FTHG = as.numeric(ft_goals[[1]][1]),
FTAG = as.numeric(ft_goals[[1]][3]),
HTHG = as.numeric(fh_goals[[1]][1]),
HTAG = as.numeric(fh_goals[[1]][3])) )
}
a <-  get_scores_for_halfs("5:5 (4:2)")
games <- games %>%
rowwise() %>%
mutate(FTHG = get_scores_for_halfs(RESULT)$FTHG,
FTAG = get_scores_for_halfs(RESULT)$FTAG,
HTHG = get_scores_for_halfs(RESULT)$HTHG,
HTAG = get_scores_for_halfs(RESULT)$HTAG) %>%
select(COMP, SEASON, ROUND, LEG, DATE, HOMETEAM, AWAYTEAM,
FTHG, FTAG, HTHG, HTAG)
first_rounds <- get_first_games()
et_games <- rbind(et_games, first_rounds)
exclude_et_games <- function(data = ucl_po_1994_2019_scrapped, et = et_games ){
data$ID = "ALL_GAMES"
et$ID = "ET_GAMES"
games <- rbind(data, et)
dup_rows <- dupsBetweenGroups(games, "ID")
games <- cbind(games, dup = dup_rows)
games <- games %>%
filter(dup == F) %>%
select(-c(ID,dup))
return(games)
}
games <- exclude_et_games()
a <- str_split("2:0 (0:0)", pattern = " ")
a[[1]][2]
str_extract_all(a[[1]][2], pattern = "[0-9, :]")[[1]]
get_scores_for_halfs <- function(score) {
halfs <- str_split(score, pattern = " ")
fh <- halfs[[1]][2]
ft <- halfs[[1]][1]
fh_goals <- str_extract_all(fh, pattern = "[0-9, :]")
ft_goals <- str_extract_all(ft, pattern = "[0-9, :]")
return( list(FTHG = as.numeric(ft_goals[[1]][1]),
FTAG = as.numeric(ft_goals[[1]][3]),
HTHG = as.numeric(fh_goals[[1]][1]),
HTAG = as.numeric(fh_goals[[1]][3])) )
}
a <-  get_scores_for_halfs("5:5 (4:2)")
games <- games %>%
rowwise() %>%
mutate(FTHG = get_scores_for_halfs(RESULT)$FTHG,
FTAG = get_scores_for_halfs(RESULT)$FTAG,
HTHG = get_scores_for_halfs(RESULT)$HTHG,
HTAG = get_scores_for_halfs(RESULT)$HTAG) %>%
select(COMP, SEASON, ROUND, LEG, DATE, HOMETEAM, AWAYTEAM,
FTHG, FTAG, HTHG, HTAG)
str(games)
get_away_goal_games <- function(data = games) {
result <- c()
for(i in 1:nrow(data)){
game <- data[i,]
other_leg <- data %>%
filter(COMP == game$COMP, SEASON == game$SEASON, ROUND == game$ROUND,
AWAYTEAM == game$HOMETEAM, HOMETEAM == game$AWAYTEAM)
if(game$FTHG + other_leg$FTAG == game$FTAG + other_leg$FTHG){
result <- rbind(result, game, other_leg)
}
}
return(result)
}
aways <- get_away_goal_games()
get_away_goal_games <- function(data = games) {
result <- c()
for(i in seq(from = 1, to = nrow(data), by = 2)){
f_leg <- data[i,]
s_leg <- data[i+1,]
if(f_leg$FTHG + s_leg$FTAG == f_leg$FTAG + s_leg$FTHG){
result <- rbind(result, f_leg, s_leg)
}
}
return(result)
}
aways <- get_away_goal_games()
View(aways)
View(aways)
