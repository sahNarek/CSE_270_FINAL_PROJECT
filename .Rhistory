View(neutral_games)
neutral_games <- function(data) {
agr_legs <- data %>%
filter(TYPE == "AGR")
elo_teams <- unique(po_elos$team)
result <- c()
for(i in 1:nrow(agr_legs)){
leg <- agr_legs[i,]
team1 <- as.character(leg$TEAM1)
team2 <- as.character(leg$TEAM2)
l2date <- leg$L2D
if(team1 %in% elo_teams && team2 %in% elo_teams){
elo1 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team1)
elo2 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team2)
wins.1 = elo.prob(elo.A = elo1,
elo.B = elo2)
wins.2 = 1 - wins.1
game <- data.frame(TEAM1 = team1, TEAM2 = team2, WINS.1 = wins.1, WINS.2 = wins.2,
LEG_ID = leg$LEG_ID, ACTUAL_WINNER = leg$WINNER)
result <- rbind(result, game)
}
}
result <- result %>%
mutate(NG_WINNER = ifelse(WINS.1 > WINS.2, TEAM1, TEAM2))
return(result)
}
neutral_games <- neutral_games(data = legs_info)
simulated_games <- neutral_games(data = legs_info)
neutral_games <- function(data) {
agr_legs <- data %>%
filter(TYPE == "AGR")
elo_teams <- unique(po_elos$team)
result <- c()
for(i in 1:nrow(agr_legs)){
leg <- agr_legs[i,]
team1 <- as.character(leg$TEAM1)
team2 <- as.character(leg$TEAM2)
l2date <- leg$L2D
if(team1 %in% elo_teams && team2 %in% elo_teams){
elo1 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team1)
elo2 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team2)
wins.1 = elo.prob(elo.A = elo1,
elo.B = elo2)
wins.2 = 1 - wins.1
game <- data.frame(TEAM1 = team1, TEAM2 = team2, WINS.1 = wins.1, WINS.2 = wins.2,
LEG_ID = leg$LEG_ID, ACTUAL_WINNER = leg$WINNER)
result <- rbind(result, game)
}
}
result <- result %>%
mutate(NG_WINNER = ifelse(WINS.1 > WINS.2, TEAM1, TEAM2))
return(result)
}
simulated_games <- neutral_games(data = legs_info)
View(simulated_games)
View(simulated_games)
str(simulated_games)
neutral_games <- function(data) {
agr_legs <- data %>%
filter(TYPE == "AGR")
elo_teams <- unique(po_elos$team)
result <- c()
for(i in 1:nrow(agr_legs)){
leg <- agr_legs[i,]
team1 <- as.character(leg$TEAM1)
team2 <- as.character(leg$TEAM2)
l2date <- leg$L2D
if(team1 %in% elo_teams && team2 %in% elo_teams){
elo1 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team1)
elo2 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team2)
wins.1 = elo.prob(elo.A = elo1,
elo.B = elo2)
wins.2 = 1 - wins.1
game <- data.frame(TEAM1 = as.character(team1), TEAM2 = as.character(team2), WINS.1 = wins.1, WINS.2 = wins.2,
LEG_ID = leg$LEG_ID, ACTUAL_WINNER = leg$WINNER)
result <- rbind(result, game)
}
}
result <- result %>%
mutate(NG_WINNER = ifelse(WINS.1 > WINS.2, TEAM1, TEAM2))
return(result)
}
simulated_games <- neutral_games(data = legs_info)
View(simulated_games)
View(simulated_games)
str(simulated_games)
neutral_games <- function(data) {
agr_legs <- data %>%
filter(TYPE == "AGR")
elo_teams <- unique(po_elos$team)
result <- c()
for(i in 1:nrow(agr_legs)){
leg <- agr_legs[i,]
team1 <- as.character(leg$TEAM1)
team2 <- as.character(leg$TEAM2)
l2date <- leg$L2D
if(team1 %in% elo_teams && team2 %in% elo_teams){
elo1 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team1)
elo2 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team2)
wins.1 = elo.prob(elo.A = elo1,
elo.B = elo2)
wins.2 = 1 - wins.1
game <- data.frame(TEAM1 = team1, TEAM2 = team2, WINS.1 = wins.1, WINS.2 = wins.2,
LEG_ID = leg$LEG_ID, ACTUAL_WINNER = leg$WINNER)
result <- rbind(result, game)
}
}
return(result)
}
simulated_games <- neutral_games(data = legs_info)
simulated_games <- neutral_games(data = legs_info)
simulated_games <- simulated_games %>%
mutate(NG_WINNER = ifelse(WINS.1 > WINS.2, TEAM1, TEAM2))
View(simulated_games)
View(simulated_games)
simulated_games <- neutral_games(data = legs_info)
simulated_games <- simulated_games %>%
mutate(NG_WINNER = ifelse(WINS.1 > WINS.2, TEAM1, TEAM2))
View(simulated_games)
View(simulated_games)
simulated_games$TEAM1 <- as.character(simulated_games$TEAM1)
simulated_games$TEAM2 <- as.character(simulated_games$TEAM2)
simulated_games <- simulated_games %>%
mutate(NG_WINNER = ifelse(WINS.1 > WINS.2, TEAM1, TEAM2))
neutral_games <- function(data) {
agr_legs <- data %>%
filter(TYPE == "AGR")
elo_teams <- unique(po_elos$team)
result <- c()
for(i in 1:nrow(agr_legs)){
leg <- agr_legs[i,]
team1 <- as.character(leg$TEAM1)
team2 <- as.character(leg$TEAM2)
l2date <- leg$L2D
if(team1 %in% elo_teams && team2 %in% elo_teams){
elo1 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team1)
elo2 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team2)
wins.1 = elo.prob(elo.A = elo1,
elo.B = elo2)
wins.2 = 1 - wins.1
game <- data.frame(TEAM1 = team1, TEAM2 = team2, WINS.1 = wins.1, WINS.2 = wins.2,
LEG_ID = leg$LEG_ID, ACTUAL_WINNER = leg$WINNER)
result <- rbind(result, game)
}
}
result$TEAM1 <- as.character(result$TEAM1)
result$TEAM2 <- as.character(result$TEAM2)
result <- result %>%
mutate(NG_WINNER = ifelse(WINS.1 > WINS.2, TEAM1, TEAM2))
return(result)
}
simulated_games <- neutral_games(data = legs_info)
View(simulated_games)
View(simulated_games)
custom_elos$relative
View(games_no_rares)
View(games_no_rares)
length(unique(games_no_rares$DATE))
wpct_table_1 <- wpct_table %>%
filter(M >= 4)
shiny::runApp('shinyApp')
runApp('shinyApp')
colnames(gg_r_winners) <- c("HOMETEAM","AWAYTEAM","ROUND","GGR.WINER","WINNER","MINUTE")
wpct_table_1 <- wpct_table %>%
filter(M >= 4)
lucky_teams_1 <- wpct_table_1 %>%
filter(WPCT > EWPCT)
unlucky_teams_1 <- wpct_table_1 %>%
filter(WPCT < EWPCT)
expected_teams_1 <- wpct_table_1 %>%
filter(WPCT == EWPCT)
packages_list <- c("ggplot2","dplyr", "scales", "DescTools",
"plotly", "stringr", "elo", "caret", "e1071")
install_or_call <- function(list = packages_list){
installed <- installed.packages()[,"Package"]
for( package in packages_list ){
if(!(package %in% installed)){
install.packages(package)
}
do.call(library, list(package))
}
}
install_or_call()
wpct_table_1 <- wpct_table %>%
filter(M >= 4)
lucky_teams_1 <- wpct_table_1 %>%
filter(WPCT > EWPCT)
unlucky_teams_1 <- wpct_table_1 %>%
filter(WPCT < EWPCT)
expected_teams_1 <- wpct_table_1 %>%
filter(WPCT == EWPCT)
et_minutes <- et_minutes %>%
mutate(ROUND = by_id(all_games, "GAME_ID", GAME_ID)$ROUND)
golden_goal_winners <- gold_goal(data = et_minutes)
golden_goal_winners$WINNER <- golden_goal_winners$WS
gg_r_winners <- et_minutes %>%
inner_join(golden_goal_winners, by = c("MINUTE", "LEG_ID"))
colnames(gg_r_winners)[6] <- "GGR.WINNER"
gg_r_winners <- gg_r_winners %>%
select(HOMETEAM.x, AWAYTEAM.x, ROUND.x, GGR.WINNER, WINNER ,MINUTE)
outcome_changes <- simulated_games %>%
filter(ACTUAL_WINNER != NG_WINNER) %>%
select(TEAM1, TEAM2, ACTUAL_WINNER, NG_WINNER, WINS.1, WINS.2)
simulated_games <- neutral_games(data = legs_info)
simulated_games <- simulated_games %>%
mutate(PREDICTED.1 = ifelse(WINS.1 > 0.5,1,
ifelse(WINS.1 < 0.5, 0, rand_0_1())),
PREDICTED.2 = ifelse(WINS.2 > 0.5,1,
ifelse(WINS.2 < 0.5, 0, rand_0_1())))
outcome_changes <- simulated_games %>%
filter(ACTUAL_WINNER != NG_WINNER) %>%
select(TEAM1, TEAM2, ACTUAL_WINNER, NG_WINNER, WINS.1, WINS.2)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
),
mainPanel(
tabsetPanel(
tabPanel("RULE APPLIED", plotlyOutput("pie")),
tabPanel("WPCT vs EWPCT", plotlyOutput("p")),
tabPanel("PO GAMES", plotlyOutput("box2")),
tabPanel("GOAL SCORING MINUTES", plotlyOutput("box")),
tabPanel("GOAL SCORING DISTRIBUTION", plotlyOutput("hist")),
tabPanel("STANDINGS", dataTableOutput("table")),
tabPanel("LEGS INFO", dataTableOutput("legs")),
tabPanel("ET GAMES GOAL MINUTES", dataTableOutput("minutes")),
tabPanel("GOLDEN GOAL", dataTableOutput("ggr")),
tabPanel("NEUTRAL GAME", dataTableOutput("ngr"))
)
)
)
))
shinyServer(function(input, output) {
output$ggr <- renderDataTable({
gg_r_winners
})
output$ngr <- renderDataTable({
outcome_changes
})
output$table <- renderDataTable({
wpct_table
})
output$legs <- renderDataTable({
legs_info
})
output$pie <- renderPlotly({
pie
})
output$p <- renderPlotly({
p
})
output$box <- renderPlotly({
box
})
output$box2 <- renderPlotly({
box_2
})
output$hist <- renderPlotly({
hist
})
})
runApp('shinyApp')
runApp('shinyApp')
shiny::runApp('shinyApp')
runApp('shinyApp')
runApp('shinyApp')
load("data/no_et_games.rda")
load("data/et_agr_94_18.rda")
load("data/legs_info.rda")
load("data/et_minutes.rda")
load("data/po_elos.rda")
packages_list <- c("ggplot2","dplyr", "scales", "DescTools",
"plotly", "stringr", "elo", "caret", "e1071")
install_or_call <- function(list = packages_list){
installed <- installed.packages()[,"Package"]
for( package in packages_list ){
if(!(package %in% installed)){
install.packages(package)
}
do.call(library, list(package))
}
}
install_or_call()
by_id <- function(data, var, id){
return(data[data[var] == id,])
}
games_by_team <- function(data = all_games, team, field) {
var <- "HOMETEAM"
if(field == "A"){
var <- "AWAYTEAM"
}
games <- data[data[var] == team,]
return(length(games))
}
games_in_et <- function(data, team){
h_games <- data %>%
filter(HOMETEAM == team && TYPE == "ET" && LEG == 2)
a_games <- data %>%
filter(AWAYTEAM == team && TYPE == "ET" && LEG == 2)
return(nrow(h_games) + nrow(a_games))
}
standings <- function(data) {
as_ht <- data %>%
group_by(HOMETEAM) %>%
summarise(W = sum(FTR == "H"),
L = sum(FTR == "A"),
D = sum(FTR == "D"),
HTGF = sum(HTHG),
HTGA = sum(HTAG),
FTGF = sum(FTHG),
FTGA = sum(FTAG),
ETGF = sum(ETHG),
ETGA = sum(ETAG))
as_at <- data %>%
group_by(AWAYTEAM) %>%
summarise(W = sum(FTR == "A"),
L = sum(FTR == "H"),
D = sum(FTR == "D"),
HTGF = sum(HTAG),
HTGA = sum(HTHG),
FTGF = sum(FTAG),
FTGA = sum(FTHG),
ETGF = sum(ETAG),
ETGA = sum(ETHG))
table <- data.frame(TEAM = as_ht$HOMETEAM, W = as_ht$W + as_at$W,
D = as_ht$D + as_at$D, L = as_ht$L + as_at$L, FTGF = as_ht$FTGF + as_at$FTGF,
FTGA = as_ht$FTGA + as_at$FTGA, ETGF = as_ht$ETGF + as_at$ETGF,
ETGA = as_ht$ETGA + as_at$ETGA, HTGF = as_ht$HTGF + as_at$HTGF,
HTGA = as_ht$HTGA + as_at$HTGA)
table$M <- table$W + table$D + table$L
table$POINTS <- 3 * table$W + table$D
table$STGF <- table$FTGF - table$HTGF
table$STGA <- table$FTGA - table$HTGA
table$EGM <- sapply(table$TEAM, games_in_et, data = et_agr)
return(table %>%
select(TEAM, M, POINTS ,everything()) %>%
arrange(desc(POINTS)))
}
cl_po_k <- function(table){
table <- table %>%
filter(!(W == 0))
table$FTGD <- table$FTGF - table$FTGA
table$ETGD <- table$ETGF - table$ETGA
table$WPCT <- (table$W + round(table$D / 3)) / (table$M)
table$RATIO <- table$FTGF / table$FTGA
k_model <- lm(log(WPCT) ~ 0 + log(RATIO), data = table)
k <- coefficients(k_model)
table$EWPCT <- table$FTGF ^ k / ((table$FTGF)^k + (table$FTGA)^k)
return(table)
}
gold_goal <- function(data) {
gold_minutes <- data %>%
filter(MINUTE > 90) %>%
group_by(LEG_ID) %>%
summarise(MINUTE = min(MINUTE))
winners <- data %>%
inner_join(gold_minutes, by = c("MINUTE", "LEG_ID"))
return(winners)
}
get_elos_by_date <- function(source, game_date, game_team) {
elos <- source %>%
filter(team == game_team , date <= game_date ) %>%
arrange(desc(date))
return(elos[1,]$rating)
}
neutral_games <- function(data) {
agr_legs <- data %>%
filter(TYPE == "AGR")
elo_teams <- unique(po_elos$team)
result <- c()
for(i in 1:nrow(agr_legs)){
leg <- agr_legs[i,]
team1 <- as.character(leg$TEAM1)
team2 <- as.character(leg$TEAM2)
l2date <- leg$L2D
if(team1 %in% elo_teams && team2 %in% elo_teams){
elo1 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team1)
elo2 <- get_elos_by_date(source = po_elos, game_date = l2date, game_team = team2)
wins.1 = elo.prob(elo.A = elo1,
elo.B = elo2)
wins.2 = 1 - wins.1
game <- data.frame(TEAM1 = team1, TEAM2 = team2, WINS.1 = wins.1, WINS.2 = wins.2,
LEG_ID = leg$LEG_ID, ACTUAL_WINNER = leg$WINNER)
result <- rbind(result, game)
}
}
result$TEAM1 <- as.character(result$TEAM1)
result$TEAM2 <- as.character(result$TEAM2)
result <- result %>%
mutate(ACTUAL.1 = ifelse(ACTUAL_WINNER == TEAM1, 1, 0),
ACTUAL.2 = ifelse(ACTUAL_WINNER == TEAM2, 1, 0),
NG_WINNER = ifelse(WINS.1 > WINS.2, TEAM1, TEAM2))
return(result)
}
rand_0_1 <- function() {
return(round(runif(n = 1, min = 0, max = 1)))
}
all_games <- rbind(games, et_agr)
games_no_rares <- all_games %>%
filter(HOMETEAM %in% unique(po_elos$team),AWAYTEAM %in% unique(po_elos$team))
legs_summary <- legs_info %>%
group_by(TYPE) %>%
summarise(COUNT = n())
pie <- plot_ly(legs_summary, labels = ~TYPE, values = ~COUNT, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(TYPE),
marker = list(line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = "DETERMINING LEG'S WINNER IN UCL PO ROUNDS",
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F))
pie
all_games <- all_games %>%
mutate(FTR = ifelse(FTHG > FTAG, "H", ifelse(FTHG < FTAG, "A", "D")),
HTG = (FTHG + ETHG + PTHG),
ATG = (FTAG + ETAG + PTAG),
GR = ifelse(HTG > ATG, "H", ifelse(HTG < ATG, "A", "D")))
et_minutes <- et_minutes %>%
mutate(ROUND = by_id(all_games, "GAME_ID", GAME_ID)$ROUND)
box <- plot_ly(et_minutes, x = ~MINUTE, color = ~ROUND, type = "box") %>%
layout(title = "GOAL SCORING MINUTES IN ALL ROUNDS OF PO ET GAMES",
yaxis = list(showgrid = F, zeroline = F, showticklabels = F),
xaxis = list(showgrid = T, zeroline = F, showticklabels = T))
table <- standings(data = all_games)
box_2 <- plot_ly(table, x = ~M, type = "box") %>%
layout(title = "NUMBER OF PO MATCHES BY TEAMS",
yaxis = list(showgrid = F, zeroline = F, showticklabels = F),
xaxis = list(showgrid = T, zeroline = F, showticklabels = T))
wpct_table <- cl_po_k(table)
p <- ggplot(wpct_table, aes(x = EWPCT, y = WPCT, text = TEAM)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, col = "red")
p <- ggplotly(p)%>%
layout(title = "EXPECTED WIN PERCENTAGE VS ACTUAL",
yaxis = list(showgrid = F, zeroline = F, showticklabels = F),
xaxis = list(showgrid = T, zeroline = F, showticklabels = T))
hist <- ggplot(data=et_minutes, aes(x = MINUTE)) +
geom_histogram(breaks=seq(0, 120, by=10),
col="red",
fill="green",
alpha = .2) +
labs(title="Histogram for Goal Minutes", x="Minutes", y="Number of Goals") +
xlim(c(0,120))
# hist_ly <- ggplotly(hist)
# hist_ly
hist
wpct_table_1 <- wpct_table %>%
filter(M >= 4)
lucky_teams_1 <- wpct_table_1 %>%
filter(WPCT > EWPCT)
unlucky_teams_1 <- wpct_table_1 %>%
filter(WPCT < EWPCT)
expected_teams_1 <- wpct_table_1 %>%
filter(WPCT == EWPCT)
et_minutes <- et_minutes %>%
mutate(ROUND = by_id(all_games, "GAME_ID", GAME_ID)$ROUND)
golden_goal_winners <- gold_goal(data = et_minutes)
golden_goal_winners$WINNER <- golden_goal_winners$WS
gg_r_winners <- et_minutes %>%
inner_join(golden_goal_winners, by = c("MINUTE", "LEG_ID"))
colnames(gg_r_winners)[6] <- "GGR.WINNER"
gg_r_winners <- gg_r_winners %>%
select(HOMETEAM.x, AWAYTEAM.x, ROUND.x, GGR.WINNER, WINNER ,MINUTE)
colnames(gg_r_winners) <- c("HOMETEAM","AWAYTEAM","ROUND","GGR.WINER","WINNER","MINUTE")
simulated_games <- neutral_games(data = legs_info)
simulated_games <- simulated_games %>%
mutate(PREDICTED.1 = ifelse(WINS.1 > 0.5,1,
ifelse(WINS.1 < 0.5, 0, rand_0_1())),
PREDICTED.2 = ifelse(WINS.2 > 0.5,1,
ifelse(WINS.2 < 0.5, 0, rand_0_1())))
outcome_changes <- simulated_games %>%
filter(ACTUAL_WINNER != NG_WINNER) %>%
select(TEAM1, TEAM2, ACTUAL_WINNER, NG_WINNER, WINS.1, WINS.2)
library(shiny)
shinyServer(function(input, output) {
output$source <- renderDataTable({
all_games
})
output$ggr <- renderDataTable({
gg_r_winners
})
output$ngr <- renderDataTable({
outcome_changes
})
output$table <- renderDataTable({
wpct_table
})
output$legs <- renderDataTable({
legs_info
})
output$pie <- renderPlotly({
pie
})
output$p <- renderPlotly({
p
})
output$box <- renderPlotly({
box
})
output$box2 <- renderPlotly({
box_2
})
output$hist <- renderPlotly({
hist
})
})
runApp('shinyApp')
runApp('shinyApp')
