View(df)
source('~/Desktop/AwayGoalRule/scraping/scrapGames.R', echo=TRUE)
View(df_clean)
View(df_clean)
clean_data <- function(data) {
df_clean <- data.frame(COMP = "UCL", SEASON = 2017,
LEG = data$X1, HOMETEAM = data$X2,
AWAYTEAM = data$X4,
RESULT = data$X5, stringsAsFactors = F )
dates <- game_dates(df_clean)
df_clean <- df_clean %>%
filter(!(LEG == ""))
dates <- dates[!is.na(dates)]
df_clean$DATE <- dates
return(df_clean)
}
paste(2018, 2017, sep = "-")
get_seasons <- function(start, end){
seasons <- c()
for(year in start:end){
season <- paste(year, year+1, sep = "-")
}
}
seasons1 <- get_seasons(2007, 2018)
get_seasons <- function(start, end){
seasons <- c()
for(year in start:end){
season <- paste(year, year+1, sep = "-")
seasons <- c(seasons, season)
}
return(seasons)
}
seasons1 <- get_seasons(2007, 2018)
game_dates <- function(df_clean){
dates <- c()
for(index in 1:nrow(df_clean)){
if(df_clean[index,]$LEG == "1st(1st leg)"){
date_string <- df_clean[index+2,]$HOMETEAM
date <- df_clean[index+2,]$HOMETEAM
}
else if(df_clean[index,]$LEG == "2nd (2nd leg)"){
date <- df_clean[index+1,]$AWAYTEAM
}
else{
date <- NA
}
dates <- c(dates, date)
}
return(dates)
}
seasons1 <- get_seasons(2007, 2018)
seasons2 <- get_seasons(1992, 2006)
library(rvest)
library(curl)
library(dplyr)
library(magrittr)
library(stringr)
get_seasons <- function(start, end){
seasons <- c()
for(year in start:end){
season <- paste(year, year+1, sep = "-")
seasons <- c(seasons, season)
}
return(seasons)
}
games_url <- "https://www.worldfootball.net/schedule/champions-league-2011-2012-achtelfinale/0/"
ucl_games <- "https://www.worldfootball.net/schedule/champions-league-"
seasons1 <- get_seasons(2007, 2018)
seasons2 <- get_seasons(1992, 2006)
rounds <- list(R16 = "achtelfinale",
R8 = "viertelfinale",
R4 = "halbfinale",
RF = "finale",
RF1 = "endspiel")
game_dates <- function(df_clean){
dates <- c()
for(index in 1:nrow(df_clean)){
if(df_clean[index,]$LEG == "1st(1st leg)"){
date_string <- df_clean[index+2,]$HOMETEAM
date <- df_clean[index+2,]$HOMETEAM
}
else if(df_clean[index,]$LEG == "2nd (2nd leg)"){
date <- df_clean[index+1,]$AWAYTEAM
}
else{
date <- NA
}
dates <- c(dates, date)
}
return(dates)
}
clean_data <- function(data, round) {
df_clean <- data.frame(COMP = "UCL", SEASON = 2017,
LEG = data$X1, HOMETEAM = data$X2,
AWAYTEAM = data$X4,
RESULT = data$X5, stringsAsFactors = F )
dates <- game_dates(df_clean)
df_clean <- df_clean %>%
filter(!(LEG == ""))
dates <- dates[!is.na(dates)]
df_clean$DATE <- dates
return(df_clean)
}
table <- read_html(games_url) %>%
html_node(css = ".standard_tabelle") %>%
html_table(header = FALSE)
df <- as.data.frame(table)
View(df)
View(df)
clean_df <- clean_data(df, round = "R16")
View(clean_df)
View(clean_df)
source('~/Desktop/AwayGoalRule/scraping/scrapGames.R', echo=TRUE)
View(clean_df)
View(clean_df)
rounds$R16
ucl_data <- function(){
for(season in seasons1){
url_16 <- paste(games_url, season, "-", rounds$R16)
url_8 <- paste(games_url, season, "-", rounds$R8)
url_4 <- paste(games_url, season, "-", rounds$R4)
url_f <- paste(games_url, season, "-", rounds$RF)
urls <- c(url_16,url_8,url_4,url_f)
}
return(urls)
}
urls <- ucl_data()
urls[5]
urls[[4]]
ucl_data <- function(){
for(season in seasons1){
url_16 <- paste(ucl_games, season, "-", rounds$R16)
url_8 <- paste(ucl_games, season, "-", rounds$R8)
url_4 <- paste(ucl_games, season, "-", rounds$R4)
url_f <- paste(ucl_games, season, "-", rounds$RF)
urls <- c(url_16,url_8,url_4,url_f)
}
return(urls)
}
urls <- ucl_data()
urls[[4]]
for(season in seasons1){
url_16 <- paste(ucl_games, season, "-", rounds$R16, sep = "")
url_8 <- paste(ucl_games, season, "-", rounds$R8, sep = "")
url_4 <- paste(ucl_games, season, "-", rounds$R4, sep = "")
url_f <- paste(ucl_games, season, "-", rounds$RF, sep = "")
urls <- c(url_16,url_8,url_4,url_f)
}
return(urls)
ucl_data <- function(){
for(season in seasons1){
url_16 <- paste(ucl_games, season, "-", rounds$R16, sep = "")
url_8 <- paste(ucl_games, season, "-", rounds$R8, sep = "")
url_4 <- paste(ucl_games, season, "-", rounds$R4, sep = "")
url_f <- paste(ucl_games, season, "-", rounds$RF, sep = "")
urls <- c(url_16,url_8,url_4,url_f)
}
return(urls)
}
urls <- ucl_data()
urls[[4]]
ucl_data <- function(){
urls <- c()
for(season in seasons1){
url_16 <- paste(ucl_games, season, "-", rounds$R16, sep = "")
url_8 <- paste(ucl_games, season, "-", rounds$R8, sep = "")
url_4 <- paste(ucl_games, season, "-", rounds$R4, sep = "")
url_f <- paste(ucl_games, season, "-", rounds$RF, sep = "")
urls <- c(url_16,url_8,url_4,url_f)
}
return(urls)
}
urls <- ucl_data()
ucl_data <- function(){
urls <- c()
for(season in seasons1){
url_16 <- paste(ucl_games, season, "-", rounds$R16, sep = "")
url_8 <- paste(ucl_games, season, "-", rounds$R8, sep = "")
url_4 <- paste(ucl_games, season, "-", rounds$R4, sep = "")
url_f <- paste(ucl_games, season, "-", rounds$RF, sep = "")
urls <- c(url_16,url_8,url_4,url_f)
}
return(urls)
}
ucl_data <- function(){
urls <- c()
for(season in seasons1){
url_16 <- paste(ucl_games, season, "-", rounds$R16, sep = "")
url_8 <- paste(ucl_games, season, "-", rounds$R8, sep = "")
url_4 <- paste(ucl_games, season, "-", rounds$R4, sep = "")
url_f <- paste(ucl_games, season, "-", rounds$RF, sep = "")
urls <- c(urls,url_16,url_8,url_4,url_f)
}
return(urls)
}
urls <- ucl_data()
get_df <- function(url){
table <- read_html(url) %>%
html_node(css = ".standard_tabelle") %>%
html_table(header = FALSE)
return(as.data.frame(table))
}
get_df <- function(url){
table <- read_html(url) %>%
html_node(css = ".standard_tabelle") %>%
html_table(header = FALSE)
return(as.data.frame(table))
}
ucl_data <- function(){
result <- c()
for(season in seasons1){
url_16 <- paste(ucl_games, season, "-", rounds$R16, sep = "")
url_8 <- paste(ucl_games, season, "-", rounds$R8, sep = "")
url_4 <- paste(ucl_games, season, "-", rounds$R4, sep = "")
url_f <- paste(ucl_games, season, "-", rounds$RF, sep = "")
r16 <- get_df(url_16)
data_16 <- clean_data(r16,round = rounds$R16)
r8 <- get_df(url_8)
data_8 <- clean_data(r8,round = rounds$R8)
r4 <- get_df(url_4)
data_4 <- clean_data(r16,round = rounds$R4)
rf <- get_df(url_f)
data_f <- clean_data(rf,round = rounds$RF)
result <- rbind(result, data_16, data_8, data_4, data_f)
}
return(result)
}
data <- ucl_data()
ucl_data <- function(){
result <- c()
for(season in seasons1){
url_16 <- paste(ucl_games, season, "-", rounds$R16, sep = "")
url_8 <- paste(ucl_games, season, "-", rounds$R8, sep = "")
url_4 <- paste(ucl_games, season, "-", rounds$R4, sep = "")
url_f <- paste(ucl_games, season, "-", rounds$RF, sep = "")
r16 <- get_df(url_16)
data_16 <- clean_data(r16,round = rounds$R16)
# r8 <- get_df(url_8)
# data_8 <- clean_data(r8,round = rounds$R8)
# r4 <- get_df(url_4)
# data_4 <- clean_data(r16,round = rounds$R4)
# rf <- get_df(url_f)
# data_f <- clean_data(rf,round = rounds$RF)
result <- rbind(result, data_16)
}
return(result)
}
data <- ucl_data()
View(data)
View(data)
clean_data <- function(data, season, round) {
df_clean <- data.frame(COMP = "UCL", SEASON = season, ROUND = round,
LEG = data$X1, HOMETEAM = data$X2,
AWAYTEAM = data$X4,
RESULT = data$X5, stringsAsFactors = F )
dates <- game_dates(df_clean)
df_clean <- df_clean %>%
filter(!(LEG == ""))
dates <- dates[!is.na(dates)]
df_clean$DATE <- dates
return(df_clean)
}
source('~/Desktop/AwayGoalRule/scraping/scrapGames.R', echo=TRUE)
View(data)
View(data)
save(data, file = "ucl_r16_2007_2018.rda")
games <- load("ucl_r16_2007_2018.rda")
games <- load(file = "ucl_r16_2007_2018.rda")
saveRDS(data, file = "ucl_r16.rds")
my_data <- readRDS("ucl_r16.rds")
View(my_data)
View(my_data)
save(data,file="data.Rda")
load("data.Rda")
aa <- load("data.Rda")
class(data)
saveRDS(data, file = "ucl_r16_2007_2018.rds")
saveRDS(data, file = "ucl_r16_2008_2019.rds")
data <- readRDS("ucl_r16_2008_2019.rds")
View(data)
View(data)
load("data/ucl_po_2008_2019.rda")
View(ucl_po_2008_2019_scrapped)
View(ucl_po_2008_2019_scrapped)
View(ucl_po_2008_2019_scrapped)
View(ucl_po_2008_2019_scrapped)
load("data/ucl_po_1994_2019.rda")
source('~/Desktop/AwayGoalRule/cleanData.R', echo=TRUE)
data <- read.csv("data/ucl_po_1994_2019.csv")
View(data)
View(data)
load("data/ucl_po_1994_2019.rda")
View(ucl_po_1994_2019_scrapped)
View(ucl_po_1994_2019_scrapped)
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
dupsBetweenGroups <- function (df, idcol) {
# df: the data frame
# idcol: the column which identifies the group each row belongs to
# Get the data columns to use for finding matches
datacols <- setdiff(names(df), idcol)
# Sort by idcol, then datacols. Save order so we can undo the sorting later.
sortorder <- do.call(order, df)
df <- df[sortorder,]
# Find duplicates within each id group (first copy not marked)
dupWithin <- duplicated(df)
# With duplicates within each group filtered out, find duplicates between groups.
# Need to scan up and down with duplicated() because first copy is not marked.
dupBetween = rep(NA, nrow(df))
dupBetween[!dupWithin] <- duplicated(df[!dupWithin,datacols])
dupBetween[!dupWithin] <- duplicated(df[!dupWithin,datacols], fromLast=TRUE) | dupBetween[!dupWithin]
# ============= Replace NA's with previous non-NA value ==============
# This is why we sorted earlier - it was necessary to do this part efficiently
# Get indexes of non-NA's
goodIdx <- !is.na(dupBetween)
# These are the non-NA values from x only
# Add a leading NA for later use when we index into this vector
goodVals <- c(NA, dupBetween[goodIdx])
# Fill the indices of the output vector with the indices pulled from
# these offsets of goodVals. Add 1 to avoid indexing to zero.
fillIdx <- cumsum(goodIdx)+1
# The original vector, now with gaps filled
dupBetween <- goodVals[fillIdx]
# Undo the original sort
dupBetween[sortorder] <- dupBetween
# Return the vector of which entries are duplicated across groups
return(dupBetween)
}
dupRows <- dupsBetweenGroups(df, "CODER")
source('~/Desktop/ET_Analysis/cleanData.R')
df <- cbind(df, dup=dupRows)
View(df)
View(df)
source('~/Desktop/ET_Analysis/cleanData.R')
packages_list <- c("ggplot2", "dplyr", "stringr")
install_or_call <- function(list = packages_list){
installed <- installed.packages()[,"Package"]
for( package in packages_list ){
if(!(package %in% installed)){
install.packages(package)
}
do.call(library, list(package))
}
}
install_or_call()
load("data/ucl_po_1994_2019.rda")
dupsBetweenGroups <- function (df, idcol) {
# df: the data frame
# idcol: the column which identifies the group each row belongs to
# Get the data columns to use for finding matches
datacols <- setdiff(names(df), idcol)
# Sort by idcol, then datacols. Save order so we can undo the sorting later.
sortorder <- do.call(order, df)
df <- df[sortorder,]
# Find duplicates within each id group (first copy not marked)
dupWithin <- duplicated(df)
# With duplicates within each group filtered out, find duplicates between groups.
# Need to scan up and down with duplicated() because first copy is not marked.
dupBetween = rep(NA, nrow(df))
dupBetween[!dupWithin] <- duplicated(df[!dupWithin,datacols])
dupBetween[!dupWithin] <- duplicated(df[!dupWithin,datacols], fromLast=TRUE) | dupBetween[!dupWithin]
# ============= Replace NA's with previous non-NA value ==============
# This is why we sorted earlier - it was necessary to do this part efficiently
# Get indexes of non-NA's
goodIdx <- !is.na(dupBetween)
# These are the non-NA values from x only
# Add a leading NA for later use when we index into this vector
goodVals <- c(NA, dupBetween[goodIdx])
# Fill the indices of the output vector with the indices pulled from
# these offsets of goodVals. Add 1 to avoid indexing to zero.
fillIdx <- cumsum(goodIdx)+1
# The original vector, now with gaps filled
dupBetween <- goodVals[fillIdx]
# Undo the original sort
dupBetween[sortorder] <- dupBetween
# Return the vector of which entries are duplicated across groups
return(dupBetween)
}
et_games <- ucl_po_1994_2019_scrapped %>%
filter(str_detect(RESULT, pattern = "[a-zA-Z]"))
get_first_games <- function(data = et_games, source = ucl_po_1994_2019_scrapped){
result <- c()
for(game in 1:nrow(data)){
et_game <- data[game,]
first_game <- source %>%
filter(COMP == et_game$COMP, SEASON == et_game$SEASON, ROUND == et_game$ROUND,
AWAYTEAM == et_game$HOMETEAM, HOMETEAM == et_game$AWAYTEAM)
result <- rbind(result, first_game)
}
return(as.data.frame(result))
}
first_rounds <- get_first_games()
et_games <- rbind(et_games, first_rounds)
games <- ucl_po_1994_2019_scrapped %>%
filter(!(str_detect(RESULT, pattern = "[a-zA-Z]")))
games$CODER <- "A"
first_rounds$CODER <- "B"
df <- rbind(games, first_rounds)
dupRows <- dupsBetweenGroups(df, "CODER")
df <- cbind(df, dup=dupRows)
View(df)
View(df)
source('~/Desktop/ET_Analysis/cleanData.R')
df1 <- df %>%
filter(dup == T)
source('~/Desktop/ET_Analysis/cleanData.R')
df <- cbind(df, dup=dupRows)
df <- rbind(games, first_rounds)
dupRows <- dupsBetweenGroups(df, "CODER")
df <- cbind(df, dup=dupRows)
df <- rbind(games, first_rounds)
dupRows <- dupsBetweenGroups(df, "CODER")
df <- cbind(df, dup=dupRows)
df1 <- df %>%
filter(dup == F)
source('~/Desktop/ET_Analysis/cleanData.R')
install.packages("compare")
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
library(compare)
compare(games, first_rounds)
source('~/Desktop/ET_Analysis/cleanData.R')
df3 <- anti_join(games, first_rounds)
df3 <- anti_join(games, first_rounds)
install.packages("remotes")
remotes::install_github("vapniks/mergeutils")
library(mergeutils)
install.packages("mergeutils")
install.packages("mergeutils")
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R', echo=TRUE)
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
View(df1)
View(df1)
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
exclude_et_games <- function(data = ucl_po_1994_2019_scrapped, et_games = et_games ){
data$ID <- "ALL_GAMES"
et_games$ID <- "ET_GAMES"
games <- rbind(data, et_games)
dup_rows <- dupsBetweenGroups(df, ID)
games <- cbind(games, dup = dup_rows)
games <- games %>%
filter(dup == F) %>%
select(-c(ID,dup))
return(games)
}
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R', echo=TRUE)
games <- exclude_et_games()
source('~/Desktop/ET_Analysis/cleanData.R')
View(et_games)
View(et_games)
exclude_et_games <- function(data = ucl_po_1994_2019_scrapped, et_games = et_games ){
data$ID <- "ALL_GAMES"
et_games$ID <- "ET_GAMES"
games <- rbind(data, et_games)
dup_rows <- dupsBetweenGroups(df, ID)
games <- cbind(games, dup = dup_rows)
games <- games %>%
filter(dup == F) %>%
select(-c(ID,dup))
return(games)
}
games <- exclude_et_games()
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
exclude_et_games <- function(data = ucl_po_1994_2019_scrapped, et_games = et_games ){
data$ID = "ALL_GAMES"
et_games$ID = "ET_GAMES"
games <- rbind(data, et_games)
dup_rows <- dupsBetweenGroups(df, ID)
games <- cbind(games, dup = dup_rows)
games <- games %>%
filter(dup == F) %>%
select(-c(ID,dup))
return(games)
}
games <- exclude_et_games()
source('~/Desktop/ET_Analysis/cleanData.R')
source('~/Desktop/ET_Analysis/cleanData.R')
